// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateTaskCustomField 更新一个自定义字段的名称和设定。更新时, 将`update_fields`字段中填写所有要修改的任务字段名, 同时在`custom_field`字段中填写要修改的字段的新值即可。自定义字段不允许修改类型, 只能根据类型修改其设置。
//
// `update_fields`支持更新的字段包括:
// * `name`: 自定义字段名称
// * `number_setting` : 数字类型设置（当且仅当要更新的自定义字段类型是数字时)
// * `member_setting` : 人员类型设置（当且仅当要更新的自定义字段类型是人员时)
// * `datetime_setting` : 日期类型设置 (当且仅当要更新的自定义字段类型是日期时)
// * `single_select_setting`: 单选类型设置 (当且仅当要更新的自定义字段类型是单选时)
// * `multi_select_setting`: 多选类型设置 (当且仅当要更新的自定义字段类型是多选时)
// * `text_setting`: 文本类型设置（目前文本类型没有可设置项）
// 当更改某个设置时, 如果不填写一个字段, 表示不覆盖原有的设定。比如, 对于一个数字, 原有的setting是:
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/patch
func (r *TaskService) UpdateTaskCustomField(ctx context.Context, request *UpdateTaskCustomFieldReq, options ...MethodOptionFunc) (*UpdateTaskCustomFieldResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskCustomField != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskCustomField mock enable")
		return r.cli.mock.mockTaskUpdateTaskCustomField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskCustomField",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/custom_fields/:custom_field_guid",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateTaskCustomFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUpdateTaskCustomField mock TaskUpdateTaskCustomField method
func (r *Mock) MockTaskUpdateTaskCustomField(f func(ctx context.Context, request *UpdateTaskCustomFieldReq, options ...MethodOptionFunc) (*UpdateTaskCustomFieldResp, *Response, error)) {
	r.mockTaskUpdateTaskCustomField = f
}

// UnMockTaskUpdateTaskCustomField un-mock TaskUpdateTaskCustomField method
func (r *Mock) UnMockTaskUpdateTaskCustomField() {
	r.mockTaskUpdateTaskCustomField = nil
}

// UpdateTaskCustomFieldReq ...
type UpdateTaskCustomFieldReq struct {
	CustomFieldGuid string                               `path:"custom_field_guid" json:"-"` // 自定义字段GUID。自定义字段GUID。可以通过[创建自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/create)接口创建, 或者通过[列取自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/list)接口查询得到, 示例值: "5ffbe0ca-6600-41e0-a634-2b38cbcf13b8"
	UserIDType      *IDType                              `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	CustomField     *UpdateTaskCustomFieldReqCustomField `json:"custom_field,omitempty"`     // 要修改的自定义字段数据
	UpdateFields    []string                             `json:"update_fields,omitempty"`    // 要修改的自定义字段类型, 支持: * `name`: 自定义字段名称, * `number_setting` : 数字类型设置（当且仅当要更新的自定义字段类型是数字时), * `member_setting` : 人员类型设置（当且仅当要更新的自定义字段类型是人员时), * `datetime_setting` : 日期类型设置 (当且仅当要更新的自定义字段类型是日期时), * `single_select_setting`: 单选类型设置 (当且仅当要更新的自定义字段类型是单选时), * `multi_select_setting`: 多选类型设置 (当且仅当要更新的自定义字段类型是多选时), * `text_setting`: 文本类型设置（当前无可设置项）, 示例值: ["name"], 长度范围: `1` ～ `20`
}

// UpdateTaskCustomFieldReqCustomField ...
type UpdateTaskCustomFieldReqCustomField struct {
	Name                *string                                                 `json:"name,omitempty"`                  // 字段名称, 支持最大50个字符, 示例值: "优先级"
	NumberSetting       *UpdateTaskCustomFieldReqCustomFieldNumberSetting       `json:"number_setting,omitempty"`        // 数字类型的字段设置
	MemberSetting       *UpdateTaskCustomFieldReqCustomFieldMemberSetting       `json:"member_setting,omitempty"`        // 人员类型的字段设置
	DatetimeSetting     *UpdateTaskCustomFieldReqCustomFieldDatetimeSetting     `json:"datetime_setting,omitempty"`      // 时间日期类型的字段设置
	SingleSelectSetting *UpdateTaskCustomFieldReqCustomFieldSingleSelectSetting `json:"single_select_setting,omitempty"` // 单选设置
	MultiSelectSetting  *UpdateTaskCustomFieldReqCustomFieldMultiSelectSetting  `json:"multi_select_setting,omitempty"`  // 多选设置
	TextSetting         *UpdateTaskCustomFieldReqCustomFieldTextSetting         `json:"text_setting,omitempty"`          // 文本类型设置
}

// UpdateTaskCustomFieldReqCustomFieldDatetimeSetting ...
type UpdateTaskCustomFieldReqCustomFieldDatetimeSetting struct {
	Format *string `json:"format,omitempty"` // 日期显示格式。支持, yyyy-mm-dd: 以短横分隔的年月日, 例如2023-08-24, yyyy/mm/dd: 以斜杠分隔的年月日, 例如2023/08/04, mm/dd/yyyy: 以斜杠分隔的月日年, 例如08/24/2023, dd/mm/yyyy: 以斜杠分隔的日月年, 例如24/08/2023, 示例值: "yyyy/mm/dd"
}

// UpdateTaskCustomFieldReqCustomFieldMemberSetting ...
type UpdateTaskCustomFieldReqCustomFieldMemberSetting struct {
	Multi *bool `json:"multi,omitempty"` // 是否支持多选, 示例值: true, 默认值: `false`
}

// UpdateTaskCustomFieldReqCustomFieldMultiSelectSetting ...
type UpdateTaskCustomFieldReqCustomFieldMultiSelectSetting struct {
	Options []*UpdateTaskCustomFieldReqCustomFieldMultiSelectSettingOption `json:"options,omitempty"` // 多选选项, 长度范围: `0` ～ `100`
}

// UpdateTaskCustomFieldReqCustomFieldMultiSelectSettingOption ...
type UpdateTaskCustomFieldReqCustomFieldMultiSelectSettingOption struct {
	Guid       *string `json:"guid,omitempty"`        // 选项的GUID。如果填写表示更新；不填写表示新建, 示例值: "4216f79b-3fda-4dc6-a0c4-a16022e47152"
	Name       *string `json:"name,omitempty"`        // 选项名称, 最大50个字符, 示例值: "高优"
	ColorIndex *int64  `json:"color_index,omitempty"` // 选项的颜色索引值, 可以是0～54中的一个数字, 示例值: 1, 取值范围: `0` ～ `54`
}

// UpdateTaskCustomFieldReqCustomFieldNumberSetting ...
type UpdateTaskCustomFieldReqCustomFieldNumberSetting struct {
	Format               *string `json:"format,omitempty"`                 // 数字展示的格式, 示例值: "normal", 可选值有: normal: 常规数字, percentage: 百分比格式, cny: 人民币格式, usd: 美元格式, custom: 自定义符号, 默认值: `normal`
	CustomSymbol         *string `json:"custom_symbol,omitempty"`          // 自定义符号, 支持最大4个字符。只有`format`设为"custom"时才会生效, 示例值: "€"
	CustomSymbolPosition *string `json:"custom_symbol_position,omitempty"` // 自定义符号显示的位置, 示例值: "left", 可选值有: left: 自定义符号放在数字左边, right: 自定义符号放在数字右边, 默认值: `right`
	Separator            *string `json:"separator,omitempty"`              // 分隔符样式, 示例值: "thousand", 可选值有: none: 无分隔符, thousand: 千分位分隔符, 默认值: `none`
	DecimalCount         *int64  `json:"decimal_count,omitempty"`          // 保留小数位数。输入的数字值的小数位数如果比该设置多, 多余的位数将被四舍五入后舍弃。如果`format`为"percentage", 表示变为百分数之后的小数位数, 示例值: 2, 默认值: `0`, 取值范围: `0` ～ `6`
}

// UpdateTaskCustomFieldReqCustomFieldSingleSelectSetting ...
type UpdateTaskCustomFieldReqCustomFieldSingleSelectSetting struct {
	Options []*UpdateTaskCustomFieldReqCustomFieldSingleSelectSettingOption `json:"options,omitempty"` // 单选选项, 长度范围: `0` ～ `100`
}

// UpdateTaskCustomFieldReqCustomFieldSingleSelectSettingOption ...
type UpdateTaskCustomFieldReqCustomFieldSingleSelectSettingOption struct {
	Guid       *string `json:"guid,omitempty"`        // 选项的GUID。如果填写表示更新；不填写表示新建, 示例值: "4216f79b-3fda-4dc6-a0c4-a16022e47152"
	Name       *string `json:"name,omitempty"`        // 选项名称, 最大50个字符, 示例值: "高优"
	ColorIndex *int64  `json:"color_index,omitempty"` // 选项的颜色索引值, 可以是0～54中的一个数字, 示例值: 1, 取值范围: `0` ～ `54`
}

// UpdateTaskCustomFieldResp ...
type UpdateTaskCustomFieldResp struct {
	CustomField *UpdateTaskCustomFieldRespCustomField `json:"custom_field,omitempty"` // 修改后的自定义字段设置
}

// UpdateTaskCustomFieldRespCustomField ...
type UpdateTaskCustomFieldRespCustomField struct {
	Guid                string                                                   `json:"guid,omitempty"`                  // 自定义字段的GUID
	Name                string                                                   `json:"name,omitempty"`                  // 自定义字段名称
	Type                string                                                   `json:"type,omitempty"`                  // 自定义字段类型
	NumberSetting       *UpdateTaskCustomFieldRespCustomFieldNumberSetting       `json:"number_setting,omitempty"`        // 数字类型的字段设置
	MemberSetting       *UpdateTaskCustomFieldRespCustomFieldMemberSetting       `json:"member_setting,omitempty"`        // 人员类型的字段设置
	DatetimeSetting     *UpdateTaskCustomFieldRespCustomFieldDatetimeSetting     `json:"datetime_setting,omitempty"`      // 时间日期类型的字段设置
	SingleSelectSetting *UpdateTaskCustomFieldRespCustomFieldSingleSelectSetting `json:"single_select_setting,omitempty"` // 单选类型的字段设置
	MultiSelectSetting  *UpdateTaskCustomFieldRespCustomFieldMultiSelectSetting  `json:"multi_select_setting,omitempty"`  // 多选类型的字段设置
	Creator             *UpdateTaskCustomFieldRespCustomFieldCreator             `json:"creator,omitempty"`               // 创建人
	CreatedAt           string                                                   `json:"created_at,omitempty"`            // 自定义字段创建的时间戳(ms)
	UpdatedAt           string                                                   `json:"updated_at,omitempty"`            // 自定义字段的更新时间戳(ms)
	TextSetting         *UpdateTaskCustomFieldRespCustomFieldTextSetting         `json:"text_setting,omitempty"`          // 文本类型的字段设置
}

// UpdateTaskCustomFieldRespCustomFieldCreator ...
type UpdateTaskCustomFieldRespCustomFieldCreator struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// UpdateTaskCustomFieldRespCustomFieldDatetimeSetting ...
type UpdateTaskCustomFieldRespCustomFieldDatetimeSetting struct {
	Format string `json:"format,omitempty"` // 日期显示格式。支持, yyyy-mm-dd: 以短横分隔的年月日, 例如2023-08-24, yyyy/mm/dd: 以斜杠分隔的年月日, 例如2023/08/04, mm/dd/yyyy: 以斜杠分隔的月日年, 例如08/24/2023, dd/mm/yyyy: 以斜杠分隔的日月年, 例如24/08/2023
}

// UpdateTaskCustomFieldRespCustomFieldMemberSetting ...
type UpdateTaskCustomFieldRespCustomFieldMemberSetting struct {
	Multi bool `json:"multi,omitempty"` // 是否支持多选
}

// UpdateTaskCustomFieldRespCustomFieldMultiSelectSetting ...
type UpdateTaskCustomFieldRespCustomFieldMultiSelectSetting struct {
	Options []*UpdateTaskCustomFieldRespCustomFieldMultiSelectSettingOption `json:"options,omitempty"` // 选项
}

// UpdateTaskCustomFieldRespCustomFieldMultiSelectSettingOption ...
type UpdateTaskCustomFieldRespCustomFieldMultiSelectSettingOption struct {
	Guid       string `json:"guid,omitempty"`        // 选项的GUID
	Name       string `json:"name,omitempty"`        // 选项名称, 最大50个字符
	ColorIndex int64  `json:"color_index,omitempty"` // 选项的颜色索引值, 可以是0～54中的一个数字。
	IsHidden   bool   `json:"is_hidden,omitempty"`   // 选项是否隐藏。隐藏后的选项在界面不可见, 也不可以再通过openapi将字段值设为该选项。
}

// UpdateTaskCustomFieldRespCustomFieldNumberSetting ...
type UpdateTaskCustomFieldRespCustomFieldNumberSetting struct {
	Format               string `json:"format,omitempty"`                 // 数字展示的格式, 可选值有: normal: 常规数字, percentage: 百分比格式, cny: 人民币格式, usd: 美元格式, custom: 自定义符号
	CustomSymbol         string `json:"custom_symbol,omitempty"`          // 自定义符号。只有`format`设为custom时才会生效。
	CustomSymbolPosition string `json:"custom_symbol_position,omitempty"` // 自定义符号显示的位置, 可选值有: left: 自定义符号放在数字左边, right: 自定义符号放在数字右边
	Separator            string `json:"separator,omitempty"`              // 分隔符样式, 可选值有: none: 无分隔符, thousand: 千分位分隔符
	DecimalCount         int64  `json:"decimal_count,omitempty"`          // 保留小数位数。输入的数字值的小数位数如果比该设置多, 多余的位数将被四舍五入后舍弃。如果`format`为"percentage", 表示变为百分数之后的小数位数。
}

// UpdateTaskCustomFieldRespCustomFieldSingleSelectSetting ...
type UpdateTaskCustomFieldRespCustomFieldSingleSelectSetting struct {
	Options []*UpdateTaskCustomFieldRespCustomFieldSingleSelectSettingOption `json:"options,omitempty"` // 选项
}

// UpdateTaskCustomFieldRespCustomFieldSingleSelectSettingOption ...
type UpdateTaskCustomFieldRespCustomFieldSingleSelectSettingOption struct {
	Guid       string `json:"guid,omitempty"`        // 选项的GUID
	Name       string `json:"name,omitempty"`        // 选项名称, 最大50个字符
	ColorIndex int64  `json:"color_index,omitempty"` // 选项的颜色索引值, 可以是0～54中的一个数字。
	IsHidden   bool   `json:"is_hidden,omitempty"`   // 选项是否隐藏。隐藏后的选项在界面不可见, 也不可以再通过openapi将字段值设为该选项。
}

// updateTaskCustomFieldResp ...
type updateTaskCustomFieldResp struct {
	Code  int64                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                     `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateTaskCustomFieldResp `json:"data,omitempty"`
	Error *ErrorDetail               `json:"error,omitempty"`
}
