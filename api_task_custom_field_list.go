// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskCustomFieldList 列取用户可访问的自定义字段列表。如果不提供`resource_type`和`resource_id`参数, 则返回用户可访问的所有自定义字段。
//
// 如果提供`resource_type`和`resource_id`, 则返回该资源下的自定义字段。目前`resource_type`仅支持"tasklist", 此时`resource_id`应为一个清单的tasklist_guid。
// 该接口支持分页。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/list
func (r *TaskService) GetTaskCustomFieldList(ctx context.Context, request *GetTaskCustomFieldListReq, options ...MethodOptionFunc) (*GetTaskCustomFieldListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskCustomFieldList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#GetTaskCustomFieldList mock enable")
		return r.cli.mock.mockTaskGetTaskCustomFieldList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskCustomFieldList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/custom_fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskCustomFieldListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskCustomFieldList mock TaskGetTaskCustomFieldList method
func (r *Mock) MockTaskGetTaskCustomFieldList(f func(ctx context.Context, request *GetTaskCustomFieldListReq, options ...MethodOptionFunc) (*GetTaskCustomFieldListResp, *Response, error)) {
	r.mockTaskGetTaskCustomFieldList = f
}

// UnMockTaskGetTaskCustomFieldList un-mock TaskGetTaskCustomFieldList method
func (r *Mock) UnMockTaskGetTaskCustomFieldList() {
	r.mockTaskGetTaskCustomFieldList = nil
}

// GetTaskCustomFieldListReq ...
type GetTaskCustomFieldListReq struct {
	PageSize     *int64  `query:"page_size" json:"-"`     // 分页大小, 示例值: 50, 默认值: `50`, 取值范围: `1` ～ `100`
	PageToken    *string `query:"page_token" json:"-"`    // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: aWQ9NzEwMjMzMjMxMDE=
	UserIDType   *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ResourceType *string `query:"resource_type" json:"-"` // 资源类型, 如提供表示仅查询特定资源下的自定义字段。目前只支持tasklist, 示例值: tasklist
	ResourceID   *string `query:"resource_id" json:"-"`   // 要查询自定义字段的归属resource_id, 示例值: 5ffbe0ca-6600-41e0-a634-2b38cbcf13b8
}

// GetTaskCustomFieldListResp ...
type GetTaskCustomFieldListResp struct {
	Items     []*GetTaskCustomFieldListRespItem `json:"items,omitempty"`      // 返回的自定义字段列表
	PageToken string                            `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskCustomFieldListRespItem ...
type GetTaskCustomFieldListRespItem struct {
	Guid                string                                             `json:"guid,omitempty"`                  // 自定义字段的GUID
	Name                string                                             `json:"name,omitempty"`                  // 自定义字段名称
	Type                string                                             `json:"type,omitempty"`                  // 自定义字段类型
	NumberSetting       *GetTaskCustomFieldListRespItemNumberSetting       `json:"number_setting,omitempty"`        // 数字类型的字段设置
	MemberSetting       *GetTaskCustomFieldListRespItemMemberSetting       `json:"member_setting,omitempty"`        // 人员类型的字段设置
	DatetimeSetting     *GetTaskCustomFieldListRespItemDatetimeSetting     `json:"datetime_setting,omitempty"`      // 时间日期类型的字段设置
	SingleSelectSetting *GetTaskCustomFieldListRespItemSingleSelectSetting `json:"single_select_setting,omitempty"` // 单选类型的字段设置
	MultiSelectSetting  *GetTaskCustomFieldListRespItemMultiSelectSetting  `json:"multi_select_setting,omitempty"`  // 多选类型的字段设置
	Creator             *GetTaskCustomFieldListRespItemCreator             `json:"creator,omitempty"`               // 创建人
	CreatedAt           string                                             `json:"created_at,omitempty"`            // 自定义字段创建的时间戳(ms)
	UpdatedAt           string                                             `json:"updated_at,omitempty"`            // 自定义字段的更新时间戳(ms)
	TextSetting         *GetTaskCustomFieldListRespItemTextSetting         `json:"text_setting,omitempty"`          // 文本字段配置
}

// GetTaskCustomFieldListRespItemCreator ...
type GetTaskCustomFieldListRespItemCreator struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// GetTaskCustomFieldListRespItemDatetimeSetting ...
type GetTaskCustomFieldListRespItemDatetimeSetting struct {
	Format string `json:"format,omitempty"` // 日期显示格式
}

// GetTaskCustomFieldListRespItemMemberSetting ...
type GetTaskCustomFieldListRespItemMemberSetting struct {
	Multi bool `json:"multi,omitempty"` // 是否支持多选
}

// GetTaskCustomFieldListRespItemMultiSelectSetting ...
type GetTaskCustomFieldListRespItemMultiSelectSetting struct {
	Options []*GetTaskCustomFieldListRespItemMultiSelectSettingOption `json:"options,omitempty"` // 选项
}

// GetTaskCustomFieldListRespItemMultiSelectSettingOption ...
type GetTaskCustomFieldListRespItemMultiSelectSettingOption struct {
	Guid       string `json:"guid,omitempty"`        // 选项的GUID
	Name       string `json:"name,omitempty"`        // 选项名称, 不能为空, 最大50个字符
	ColorIndex int64  `json:"color_index,omitempty"` // 选项的颜色索引值, 可以是0～54中的一个数字。如果不填写则会随机选一个。
	IsHidden   bool   `json:"is_hidden,omitempty"`   // 选项是否隐藏。隐藏后的选项在界面不可见, 也不可以再通过openapi将字段值设为该选项。
}

// GetTaskCustomFieldListRespItemNumberSetting ...
type GetTaskCustomFieldListRespItemNumberSetting struct {
	Format               string `json:"format,omitempty"`                 // 数字展示的格式, 可选值有: normal: 常规数字, percentage: 百分比格式, cny: 人民币格式, usd: 美元格式, custom: 自定义符号
	CustomSymbol         string `json:"custom_symbol,omitempty"`          // 自定义符号。只有`format`设为custom时才会生效。
	CustomSymbolPosition string `json:"custom_symbol_position,omitempty"` // 自定义符号显示的位置, 可选值有: left: 自定义符号放在数字左边, right: 自定义符号放在数字右边
	Separator            string `json:"separator,omitempty"`              // 分隔符样式, 可选值有: none: 无分隔符, thousand: 千分位分隔符
	DecimalCount         int64  `json:"decimal_count,omitempty"`          // 保留小数位数。输入的数字值的小数位数如果比该设置多, 多余的位数将被四舍五入后舍弃。如果`format`为"percentage", 表示变为百分数之后的小数位数。
}

// GetTaskCustomFieldListRespItemSingleSelectSetting ...
type GetTaskCustomFieldListRespItemSingleSelectSetting struct {
	Options []*GetTaskCustomFieldListRespItemSingleSelectSettingOption `json:"options,omitempty"` // 选项
}

// GetTaskCustomFieldListRespItemSingleSelectSettingOption ...
type GetTaskCustomFieldListRespItemSingleSelectSettingOption struct {
	Guid       string `json:"guid,omitempty"`        // 选项的GUID
	Name       string `json:"name,omitempty"`        // 选项名称, 不能为空, 最大50个字符
	ColorIndex int64  `json:"color_index,omitempty"` // 选项的颜色索引值, 可以是0～54中的一个数字。如果不填写则会随机选一个。
	IsHidden   bool   `json:"is_hidden,omitempty"`   // 选项是否隐藏。隐藏后的选项在界面不可见, 也不可以再通过openapi将字段值设为该选项。
}

// getTaskCustomFieldListResp ...
type getTaskCustomFieldListResp struct {
	Code  int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                      `json:"msg,omitempty"`  // 错误描述
	Data  *GetTaskCustomFieldListResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}
